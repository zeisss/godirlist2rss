# This references the default golang container from
# the Docker Hub: https://registry.hub.docker.com/u/library/golang/
# If you want Google's container you would reference google/golang
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: golang
# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html

# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongodb
    # http://devcenter.wercker.com/docs/services/mongodb.html
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    # Sets the go workspace and places you package
    # at the right place in the workspace tree
    - setup-go-workspace

    # Gets the dependencies
    - script:
        name: go get
        code: |
          go get
          mkdir $WERCKER_OUTPUT_DIR/dist

    # Build the project
    - script:
        name: go build (linux / ARM6)
        code: |
          GOOS=linux GOARCH=arm GOARM=6 go build -o $WERCKER_OUTPUT_DIR/dist/godirlist2rss-linux-arm6 ./...
    - script:
        name: go build (linux / ARM7)
        code: |
          GOOS=linux GOARCH=arm GOARM=7 go build -o $WERCKER_OUTPUT_DIR/dist/godirlist2rss-linux-arm7 ./...
    - script:
        name: go build (linux / AMD64)
        code: |
          GOOS=linux GOARCH=amd64 go build -o $WERCKER_OUTPUT_DIR/dist/godirlist2rss-linux-amd64 ./...
    - script:
        name: go build (darwin / AMD64)
        code: |
          GOOS=darwin go build -o $WERCKER_OUTPUT_DIR/dist/godirlist2rss-darwin ./...

    # Test the project
    - script:
        name: go test
        code: |
          go test ./...

deploy:
    steps:
        - script:
            name: Upload Build Artifact 
            code: |
                find . 
                cd ./dist

                VERSION=latest
                project=godirlist2rss
                path="/artifacts/${project}/${VERSION}/"
                basecurl="curl -sS -u${FS_USER}:${FS_PASSWORD} ${FS_ENDPOINT}"
                acl=public-read

                ls | xargs -P4 -I{} ${basecurl}${path}{} -XPUT --data-binary @{} -H"X-ACL: ${acl}" -H'Content-Type: application/octet-stream' -i
                echo $?
